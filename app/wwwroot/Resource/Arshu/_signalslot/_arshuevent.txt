Usage

You may start listening to events by calling EventManager.listen. It accepts two signatures:

// Passing an event name and a callback function
EventManager.listen("button_click", function () {
	alert("The user clicked on the button.");
});

// Passing and object with event name and callback pairs
EventManager.listen({
	"submit_click" : function () {
		alert("The user clicked on the submit button.");
	},
	"delete_click" : function () {
		alert("The user clicked on the delete button.");
	}
});

To notify an event, use the EventManager.notify:

// Notifying an event
EventManager.notify("request_complete");

// Passing data along the event
EventManager.notify("request_complete", {
	"message" : "Success!"
	});


	The data is passed as an argument to the callback function. Here's a complete example:

var printMessage = function (data) {
	alert("Message: " + data.message);
};

EventManager.listen("request_complete", printMessage);
EventManager.notify("request_complete", {
	"message" : "Success!"
});
You may stop listening to an event and unregister a callback by calling EventManager.mute:

var myFunction = function () {
	console.log("foo");
};

EventManager.listen("request_complete", myFunction);

EventManager.notify("request_compete"); // "foo"

EventManager.mute("request_complete", myFunction);

EventManager.notify("request_compete"); // won't do anything