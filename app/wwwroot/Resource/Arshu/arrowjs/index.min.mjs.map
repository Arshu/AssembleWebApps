{"version":3,"names":["queueStack","Set","nextTicks","nextTick","fn","size","Promise","resolve","p","r","add","isTpl","template","isT","isR","obj","$on","isReactiveFunction","queue","newValue","oldValue","queueMicrotask","executeQueue","Array","from","clear","ticks","forEach","measurements","measure","label","start","performance","now","isFn","x","result","push","dependencyCollector","Map","data","state","observers","o","observerProperties","op","isArray","children","proxySource","Object","create","property","entry","dep","a","c","obs","get","props","set","$off","_em","has","depProps","_st","proxy","_p","undefined","Proxy","target","key","args","Reflect","value","addDep","prototype","arrayOperation","old","oldState","newR","reactiveMerge","_c","didSet","map","tracker","properties","arr","native","synthetic","retVal","call","item","i","String","parent","arg","remove","inserts","arguments","length","reactiveTarget","reactiveSource","callbacks","w","after","trackingId","Symbol","currentDeps","queuedCallFn","callFn","newDeps","delete","propertiesToUnobserve","newProperties","prop","listeners","WeakMap","templateMemo","delimiter","bookend","delimiterComment","bookendComment","t","strings","expSlots","expressions","str","addExpressions","expression","html","observer","assign","e","_up","exp","reduce","toString","strVal","el","frag","fragment","createNodes","_k","_h","dom","node","childNodes","nodeType","nodeValue","Element","attrs","hasChildNodes","HTMLOptionElement","selected","defaultSelected","comment","appendChild","_a","toRemove","attr","attributes","attrName","name","charAt","event","substring","addEventListener","isIDL","startsWith","getAttribute","setAttribute","removeAttribute","removeNodes","removeNode","listener","removeEventListener","boundNode","createPartial","partialMemo","setNode","parentNode","replaceChild","isUpdate","partial","tpl","document","createElement","innerHTML","content","cloneNode","normalize","group","chunks","previousChunks","keyedChunks","addPlaceholderChunk","assignDomChunks","chunk","createTextNode","reset","ch","l","localExpressions","keyedChunk","subPartial","startChunking","lastNode","createComment","closeSubPartial","last","lastChild","transferChunks","index","prev","isTextNodeChunk","Text","nextSibling","chunkIndex","defineProperty","partialA","chunksB","reactive","watch"],"sources":["../src/common.ts","../src/reactive.ts","../src/html.ts","../src/index.ts"],"sourcesContent":["/**\n * A queue of expressions to run as soon as an async slot opens up.\n */\nconst queueStack = new Set();\n/**\n * A stack of functions to run on the next tick.\n */\nconst nextTicks = new Set();\n/**\n * Adds the ability to listen to the next tick.\n * @param  {CallableFunction} fn?\n * @returns Promise\n */\nexport function nextTick(fn) {\n    if (!queueStack.size) {\n        if (fn)\n            fn();\n        return Promise.resolve();\n    }\n    let resolve;\n    const p = new Promise((r) => {\n        resolve = r;\n    });\n    nextTicks.add(() => {\n        if (fn)\n            fn();\n        resolve();\n    });\n    return p;\n}\nexport function isTpl(template) {\n    return typeof template === 'function' && !!template.isT;\n}\nexport function isR(obj) {\n    return (typeof obj === 'object' &&\n        obj !== null &&\n        '$on' in obj &&\n        typeof obj.$on === 'function');\n}\n/**\n * Utility that ensures we only attempt to make reactive objects that _can_ be made reactive.\n *\n * Examples of objects that cause issues: NodeList, HTMLElement\n * @see {@link https://github.com/vuejs/core/blob/8998afa42755cbdb3403cd6c0fe158980da8492c/packages/reactivity/src/reactive.ts#L43-L62}\n */\n// export function canReactiveWrap(maybeObj: any): boolean {\n//   return ['Object', 'Array'].includes(\n//     // from https://github.com/vuejs/core/blob/8998afa42755cbdb3403cd6c0fe158980da8492c/packages/shared/src/general.ts#L64-L67\n//     // extracts \"Type\" from \"[object Type]\"\n//     Object.prototype.toString.call(maybeObj).slice(8, -1)\n//   )\n// }\nexport function isReactiveFunction(fn) {\n    return '$on' in fn;\n}\n/**\n * Queue an item to execute after all synchronous functions have been run. This\n * is used for `w()` to ensure multiple dependency mutations tracked on the\n * same expression do not result in multiple calls.\n * @param  {CallableFunction} fn\n * @returns ObserverCallback\n */\nexport function queue(fn) {\n    return (newValue, oldValue) => {\n        function executeQueue() {\n            // copy the current queues and clear it to allow new items to be added\n            // during the execution of the current queue.\n            const queue = Array.from(queueStack);\n            queueStack.clear();\n            const ticks = Array.from(nextTicks);\n            nextTicks.clear();\n            queue.forEach((fn) => fn(newValue, oldValue));\n            ticks.forEach((fn) => fn());\n            if (queueStack.size) {\n                // we received new items while executing the queue, so we need to\n                // execute the queue again.\n                queueMicrotask(executeQueue);\n            }\n        }\n        if (!queueStack.size) {\n            queueMicrotask(executeQueue);\n        }\n        queueStack.add(fn);\n    };\n}\nexport const measurements = {};\n/**\n * A simple benchmarking function.\n * @param label - A label for the measurement\n * @param fn - A function to measure or a number to record\n * @returns\n */\nexport function measure(label, fn) {\n    const start = performance.now();\n    const isFn = typeof fn === 'function';\n    label = isFn ? `${label} (ms)` : `${label} (calls)`;\n    const x = isFn ? fn() : fn;\n    const result = isFn ? performance.now() - start : fn;\n    if (!measurements[label])\n        measurements[label] = [result];\n    else\n        measurements[label].push(result);\n    return x;\n}\n","import { isR, queue, isReactiveFunction } from './common';\n/**\n * A \"global\" dependency tracker object.\n */\nconst dependencyCollector = new Map();\n/**\n * Given a data object, often an object literal, return a proxy of that object\n * with mutation observers for each property.\n *\n * @param  {DataSource} data\n * @returns ReactiveProxy\n */\nexport function r(data, state = {}) {\n    // If this is already reactive, a non object, or an object than shouldn't be made reactive just return it.\n    if (isR(data) || typeof data !== 'object')\n        return data;\n    // This is the observer registry itself, with properties as keys and callbacks as watchers.\n    const observers = state.o || new Map();\n    // This is a reverse map of observers with callbacks as keys and properties that callback is watching as values.\n    const observerProperties = state.op || new Map();\n    // If the data is an array, we should know...but only once.\n    const isArray = Array.isArray(data);\n    const children = [];\n    const proxySource = isArray ? [] : Object.create(data, {});\n    for (const property in data) {\n        const entry = data[property];\n        if (typeof entry === 'object' && entry !== null) {\n            proxySource[property] = !isR(entry) ? r(entry) : entry;\n            children.push(property);\n        }\n        else {\n            proxySource[property] = entry;\n        }\n    }\n    // The add/remove dependency function(s)\n    const dep = (a) => (p, c) => {\n        let obs = observers.get(p);\n        let props = observerProperties.get(c);\n        if (!obs) {\n            obs = new Set();\n            observers.set(p, obs);\n        }\n        if (!props) {\n            props = new Set();\n            observerProperties.set(c, props);\n        }\n        obs[a](c);\n        props[a](p);\n    };\n    // Add a property listener\n    const $on = dep('add');\n    // Remove a property listener\n    const $off = dep('delete');\n    // Emit a property mutation event by calling all sub-dependencies.\n    const _em = (property, newValue, oldValue) => {\n        observers.has(property) &&\n            observers.get(property).forEach((c) => c(newValue, oldValue));\n    };\n    /**\n     * Return the reactive proxy state data.\n     */\n    const _st = () => {\n        return {\n            o: observers,\n            op: observerProperties,\n            r: proxySource,\n            p: proxy._p,\n        };\n    };\n    // These are the internal properties of all `r()` objects.\n    const depProps = {\n        $on,\n        $off,\n        _em,\n        _st,\n        _p: undefined,\n    };\n    // Create the actual proxy object itself.\n    const proxy = new Proxy(proxySource, {\n        has(target, key) {\n            return key in depProps || key in target;\n        },\n        get(...args) {\n            const [, p] = args;\n            // For properties of the DependencyProps type, return their values from\n            // the depProps instead of the target.\n            if (Reflect.has(depProps, p))\n                return Reflect.get(depProps, p);\n            const value = Reflect.get(...args);\n            // For any existing dependency collectors that are active, add this\n            // property to their observed properties.\n            addDep(proxy, p);\n            // We have special handling of array operations to prevent O(n^2) issues.\n            if (isArray && p in Array.prototype) {\n                return arrayOperation(p, proxySource, proxy, value);\n            }\n            return value;\n        },\n        set(...args) {\n            const [target, property, value] = args;\n            const old = Reflect.get(target, property);\n            if (Reflect.has(depProps, property)) {\n                // We are setting a reserved property like _p\n                return Reflect.set(depProps, property, value);\n            }\n            if (value && isR(old)) {\n                const o = old;\n                // We're assigning an object (array or pojo probably), so we want to be\n                // reactive, but if we already have a reactive object in this\n                // property, then we need to replace it and transfer the state of deps.\n                const oldState = o._st();\n                const newR = isR(value) ? reactiveMerge(value, o) : r(value, oldState);\n                Reflect.set(target, property, \n                // Create a new reactive object\n                newR);\n                _em(property, newR);\n                oldState.o.forEach((_c, property) => {\n                    const oldValue = Reflect.get(old, property);\n                    const newValue = Reflect.get(newR, property);\n                    if (oldValue !== newValue) {\n                        o._em(property, newValue, oldValue);\n                    }\n                });\n                return true;\n            }\n            const didSet = Reflect.set(...args);\n            if (didSet) {\n                if (old !== value) {\n                    // Notify any discrete property observers of the change.\n                    _em(property, value, old);\n                }\n                if (proxy._p) {\n                    // Notify parent observers of a change.\n                    proxy._p[1]._em(...proxy._p);\n                }\n            }\n            return didSet;\n        },\n    });\n    if (state.p)\n        proxy._p = state.p;\n    // Before we return the proxy object, quickly map through the children\n    // and set the parents (this is only run on the initial setup).\n    children.map((c) => {\n        proxy[c]._p = [c, proxy];\n    });\n    return proxy;\n}\n/**\n * Add a property to the tracked reactive properties.\n * @param  {ReactiveProxy} proxy\n * @param  {DataSourceKey} property\n */\nfunction addDep(proxy, property) {\n    dependencyCollector.forEach((tracker) => {\n        let properties = tracker.get(proxy);\n        if (!properties) {\n            properties = new Set();\n            tracker.set(proxy, properties);\n        }\n        properties.add(property);\n    });\n}\nfunction arrayOperation(op, arr, proxy, native) {\n    const synthetic = (...args) => {\n        // The `as DataSource` here should really be the ArrayPrototype, but we're\n        // just tricking the compiler since we've already checked it.\n        const retVal = Array.prototype[op].call(arr, ...args);\n        // @todo determine how to handle notifying elements and parents of elements.\n        arr.forEach((item, i) => proxy._em(String(i), item));\n        // Notify the the parent of changes.\n        if (proxy._p) {\n            const [property, parent] = proxy._p;\n            parent._em(property, proxy);\n        }\n        return retVal;\n    };\n    switch (op) {\n        case 'shift':\n        case 'pop':\n        case 'sort':\n        case 'reverse':\n        case 'copyWithin':\n            return synthetic;\n        case 'unshift':\n        case 'push':\n        case 'fill':\n            return (...args) => synthetic(...args.map((arg) => r(arg)));\n        case 'splice':\n            return function (start, remove, ...inserts) {\n                // Preserve the argument count when there's only one argument,\n                // because if a second argument is passed but undefined,\n                // it gets treated as 0.\n                return arguments.length === 1\n                    ? synthetic(start)\n                    : synthetic(start, remove, ...inserts.map((arg) => r(arg)));\n            };\n        default:\n            return native;\n    }\n}\n/**\n * Given two reactive proxies, merge the important state attributes from the\n * source into the target.\n * @param  {ReactiveProxy} reactiveTarget\n * @param  {ReactiveProxy} reactiveSource\n * @returns ReactiveProxy\n */\nfunction reactiveMerge(reactiveTarget, reactiveSource) {\n    const state = reactiveSource._st();\n    if (state.o) {\n        state.o.forEach((callbacks, property) => {\n            callbacks.forEach((c) => {\n                reactiveTarget.$on(property, c);\n            });\n        });\n    }\n    if (state.p) {\n        reactiveTarget._p = state.p;\n    }\n    return reactiveTarget;\n}\n/**\n * Watch a function and track any reactive dependencies on it, re-calling it if\n * those dependencies are changed.\n * @param  {CallableFunction} fn\n * @param  {CallableFunction} after?\n * @returns unknown\n */\nexport function w(fn, after) {\n    const trackingId = Symbol();\n    if (!dependencyCollector.has(trackingId)) {\n        dependencyCollector.set(trackingId, new Map());\n    }\n    let currentDeps = new Map();\n    const queuedCallFn = queue(callFn);\n    function callFn() {\n        dependencyCollector.set(trackingId, new Map());\n        const value = fn();\n        const newDeps = dependencyCollector.get(trackingId);\n        dependencyCollector.delete(trackingId);\n        // Disable existing properties\n        currentDeps.forEach((propertiesToUnobserve, proxy) => {\n            const newProperties = newDeps.get(proxy);\n            if (newProperties) {\n                newProperties.forEach((prop) => propertiesToUnobserve.delete(prop));\n            }\n            propertiesToUnobserve.forEach((prop) => proxy.$off(prop, queuedCallFn));\n        });\n        // Start observing new properties.\n        newDeps.forEach((properties, proxy) => {\n            properties.forEach((prop) => proxy.$on(prop, queuedCallFn));\n        });\n        currentDeps = newDeps;\n        return after ? after(value) : value;\n    }\n    // If this is a reactive function, then when the expression is updated, re-run\n    if (isReactiveFunction(fn))\n        fn.$on(callFn);\n    return callFn();\n}\n","import { w } from './reactive';\nimport { isTpl, measure } from './common';\n/**\n * Event listeners that were bound by arrow and should be cleaned up should the\n * given node be garbage collected.\n */\nconst listeners = new WeakMap();\n/**\n * A list of HTML templates to a HTMLTemplate element that contains instances\n * of each. This acts as a cache.\n */\nconst templateMemo = {};\n/**\n * The delimiter that describes where expressions are located.\n */\nconst delimiter = '➳❍';\nconst bookend = '❍⇚';\nconst delimiterComment = `<!--${delimiter}-->`;\nconst bookendComment = `<!--${bookend}-->`;\n/**\n * The template tagging function, used like: html`<div></div>`(mountEl)\n * @param  {TemplateStringsArray} strings\n * @param  {any[]} ...expressions\n * @returns ArrowTemplate\n */\nexport function t(strings, ...expSlots) {\n    const expressions = [];\n    let str = '';\n    const addExpressions = (expression, html) => {\n        if (typeof expression === 'function') {\n            // eslint-disable-next-line @typescript-eslint/no-empty-function\n            let observer = () => { };\n            expressions.push(Object.assign((...args) => expression(...args), {\n                e: expression,\n                $on: (obs) => {\n                    observer = obs;\n                },\n                _up: (exp) => {\n                    expression = exp;\n                    observer();\n                },\n            }));\n            return html + delimiterComment;\n        }\n        if (Array.isArray(expression)) {\n            return expression.reduce((html, exp) => addExpressions(exp, html), html);\n        }\n        return html + expression;\n    };\n    const toString = () => {\n        if (!str) {\n            if (!expSlots.length && strings.length === 1 && strings[0] === '') {\n                str = '<!---->';\n            }\n            else {\n                str = strings.reduce(function interlaceTemplate(html, strVal, i) {\n                    html += strVal;\n                    return expSlots[i] !== undefined\n                        ? addExpressions(expSlots[i], html)\n                        : html;\n                }, '');\n            }\n        }\n        return str;\n    };\n    const template = (el) => {\n        const dom = createNodes(toString());\n        const frag = fragment(dom, { i: 0, e: expressions });\n        return el ? frag(el) : frag();\n    };\n    // If the template contains no expressions, it is 100% static so it's key\n    // its own content\n    template.isT = true;\n    template._k = 0;\n    template._h = () => [toString(), expressions, template._k];\n    template.key = (key) => {\n        template._k = key;\n        return template;\n    };\n    return template;\n}\n/**\n * @param  {NodeList} dom\n * @param  {ReactiveExpressions} tokens\n * @param  {ReactiveProxy} data?\n */\nfunction fragment(dom, expressions) {\n    let node;\n    let i = 0;\n    const children = dom.childNodes;\n    while ((node = children.item(i++))) {\n        // Delimiters in the body are found inside comments.\n        if (node.nodeType === 8 && node.nodeValue === delimiter) {\n            // We are dealing with a reactive node.\n            comment(node, expressions);\n            continue;\n        }\n        // Bind attributes, add events, and push onto the fragment.\n        if (node instanceof Element)\n            attrs(node, expressions);\n        if (node.hasChildNodes()) {\n            fragment(node, expressions);\n        }\n        // Select lists \"default\" selections get out of wack when being moved around\n        // inside fragments, this resets them.\n        if (node instanceof HTMLOptionElement)\n            node.selected = node.defaultSelected;\n    }\n    return ((parent) => {\n        if (parent) {\n            parent.appendChild(dom);\n            return parent;\n        }\n        return dom;\n    });\n}\n/**\n * Given a node, parse for meaningful expressions.\n * @param  {Element} node\n * @returns void\n */\nfunction attrs(node, expressions) {\n    var _a;\n    const toRemove = [];\n    let i = 0;\n    let attr;\n    while ((attr = node.attributes[i++])) {\n        if (expressions.i >= expressions.e.length)\n            return;\n        if (attr.value !== delimiterComment)\n            continue;\n        let attrName = attr.name;\n        const expression = expressions.e[expressions.i++];\n        if (attrName.charAt(0) === '@') {\n            const event = attrName.substring(1);\n            node.addEventListener(event, expression);\n            if (!listeners.has(node))\n                listeners.set(node, new Map());\n            (_a = listeners.get(node)) === null || _a === void 0 ? void 0 : _a.set(event, expression);\n            toRemove.push(attrName);\n        }\n        else {\n            // Logic to determine if this is an IDL attribute or a content attribute\n            const isIDL = (attrName === 'value' && 'value' in node) ||\n                attrName === 'checked' ||\n                (attrName.startsWith('.') && (attrName = attrName.substring(1)));\n            w(expression, (value) => {\n                if (isIDL) {\n                    // Handle all IDL attributes, TS won’t like this since it is not\n                    // fully aware of the type we are operating on, but JavaScript is\n                    // perfectly fine with it, so we need to ignore TS here.\n                    // @ts-ignore:next-line\n                    node[attrName] = value;\n                    // Explicitly set the \"value\" to false remove the attribute. However\n                    // we need to be sure this is not a \"Reflected\" attribute, so we check\n                    // the current value of the attribute to make sure it is not the same\n                    // as the value we just set. If it is the same, it must be reflected.\n                    // so removing the attribute would remove the idl we just set.\n                    if (node.getAttribute(attrName) != value)\n                        value = false;\n                }\n                // Set a standard content attribute.\n                value !== false\n                    ? node.setAttribute(attrName, value)\n                    : (node.removeAttribute(attrName), i--);\n            });\n        }\n    }\n    toRemove.forEach((attrName) => node.removeAttribute(attrName));\n}\n/**\n * Removes DOM nodes from the dom and cleans up any attached listeners.\n * @param node - A DOM element to remove\n */\nfunction removeNodes(node) {\n    node.forEach(removeNode);\n}\n/**\n * Removes the node from the dom and cleans up any attached listeners.\n * @param node - A DOM element to remove\n */\nfunction removeNode(node) {\n    var _a;\n    node.remove();\n    (_a = listeners\n        .get(node)) === null || _a === void 0 ? void 0 : _a.forEach((listener, event) => node.removeEventListener(event, listener));\n}\n/**\n * Given a textNode, parse the node for expressions and return a fragment.\n * @param  {Node} node\n * @param  {ReactiveProxy} data\n * @param  {ReactiveExpressions} tokens\n * @returns DocumentFragment\n */\nfunction comment(node, expressions) {\n    var _a;\n    // At this point, we know we're dealing with some kind of reactive token fn\n    const expression = expressions.e[expressions.i++];\n    let boundNode;\n    if (expression && isTpl(expression.e)) {\n        // If the expression is an html`` (ArrowTemplate), then call it with data\n        // and then call the ArrowTemplate with no parent, so we get the nodes.\n        boundNode = createPartial().add(expression.e)();\n    }\n    else {\n        // This is where the *actual* reactivity takes place:\n        let partialMemo;\n        boundNode = (partialMemo = w(expression, (value) => setNode(value, partialMemo)))();\n    }\n    (_a = node.parentNode) === null || _a === void 0 ? void 0 : _a.replaceChild(boundNode, node);\n}\n/**\n * Set the value of a given node.\n * @param  {Node} n\n * @param  {any} value\n * @param  {ReactiveProxy} data\n * @returns Node\n */\nfunction setNode(value, p) {\n    const isUpdate = typeof p === 'function';\n    const partial = isUpdate ? p : createPartial();\n    Array.isArray(value)\n        ? value.forEach((item) => measure('partialAdd', () => partial.add(item)))\n        : partial.add(value);\n    if (isUpdate)\n        partial._up();\n    return partial;\n}\n/**\n * Given an HTML string, produce actual DOM elements.\n * @param html - a string of html\n * @returns\n */\nfunction createNodes(html) {\n    var _a;\n    const tpl = (_a = templateMemo[html]) !== null && _a !== void 0 ? _a : (() => {\n        const tpl = document.createElement('template');\n        tpl.innerHTML = html;\n        return (templateMemo[html] = tpl);\n    })();\n    const dom = tpl.content.cloneNode(true);\n    dom.normalize(); // textNodes are automatically split somewhere around 65kb, this joins them back together.\n    return dom;\n}\n/**\n * Template partials are stateful functions that perform a fragment render when\n * called, but also have function properties like ._up() which attempts to only\n * perform a patch of the previously rendered nodes.\n * @returns TemplatePartial\n */\nfunction createPartial(group = Symbol()) {\n    let html = '';\n    let expressions = { i: 0, e: [] };\n    let chunks = [];\n    let previousChunks = [];\n    const keyedChunks = new Map();\n    const toRemove = [];\n    /**\n     * This is the actual document partial function.\n     */\n    const partial = () => {\n        let dom;\n        if (!chunks.length)\n            addPlaceholderChunk();\n        if (chunks.length === 1 && !isTpl(chunks[0].tpl)) {\n            // In this case we have only a textNode to render, so we can just return\n            // the text node with the proper value applied.\n            const chunk = chunks[0];\n            chunk.dom.length\n                ? (chunk.dom[0].nodeValue = chunk.tpl)\n                : chunk.dom.push(document.createTextNode(chunk.tpl));\n            dom = chunk.dom[0];\n        }\n        else {\n            dom = assignDomChunks(fragment(createNodes(html), expressions)());\n        }\n        reset();\n        return dom;\n    };\n    partial.ch = () => previousChunks;\n    partial.l = 0;\n    partial.add = (tpl) => {\n        if (!tpl && tpl !== 0)\n            return partial;\n        // If the tpl is a string or a number it means the result should be a\n        // textNode — in that case we do *not* want to generate any DOM nodes for it\n        // so here we want to ensure that `html` is just ''.\n        let localExpressions = [];\n        let key;\n        let template = '';\n        if (isTpl(tpl)) {\n            ;\n            [template, localExpressions, key] = tpl._h();\n        }\n        html += template;\n        html += bookendComment;\n        const keyedChunk = key && keyedChunks.get(key);\n        const chunk = keyedChunk || {\n            html: template,\n            exp: localExpressions,\n            dom: [],\n            tpl,\n            key,\n        };\n        chunks.push(chunk);\n        if (key) {\n            // Since this is a keyed chunk, we need to either add it to the\n            // keyedChunks map, or we need to update the expressions in that chunk.\n            keyedChunk\n                ? keyedChunk.exp.forEach((exp, i) => exp._up(localExpressions[i].e))\n                : keyedChunks.set(key, chunk);\n        }\n        expressions.e.push(...localExpressions);\n        partial.l++;\n        return partial;\n    };\n    partial._up = () => {\n        const subPartial = createPartial(group);\n        let startChunking = 0;\n        let lastNode = previousChunks[0].dom[0];\n        // If this is an empty update, we need to \"placehold\" its spot in the dom\n        // with an empty placeholder chunk.\n        if (!chunks.length)\n            addPlaceholderChunk(document.createComment(''));\n        const closeSubPartial = () => {\n            if (!subPartial.l)\n                return;\n            const frag = subPartial();\n            const last = frag.lastChild;\n            lastNode[startChunking ? 'after' : 'before'](frag);\n            transferChunks(subPartial, chunks, startChunking);\n            lastNode = last;\n        };\n        chunks.forEach((chunk, index) => {\n            // There are a few things that can happen in here:\n            // 1. We match a key and output previously rendered nodes.\n            // 2. We use a previous rendered dom, and swap the expression.\n            // 3. The actual HTML chunk is changed/new so we need to remove the nodes.\n            // 4. We render totally new nodes using a partial.\n            const prev = previousChunks[index];\n            if (chunk.key && chunk.dom.length) {\n                closeSubPartial();\n                // This is a keyed dom chunk that has already been rendered.\n                if (!prev || prev.dom !== chunk.dom) {\n                    lastNode[index ? 'after' : 'before'](...chunk.dom);\n                }\n                lastNode = chunk.dom[chunk.dom.length - 1];\n                // Note: we don't need to update keyed chunks expressions here because\n                // it is done in partial.add as soon as a keyed chunk is added to the\n                // partial.\n            }\n            else if (prev && chunk.html === prev.html && !prev.key) {\n                // We can reuse the DOM node, and need to swap the expressions. First\n                // close out any partial chunks. Then \"upgrade\" the expressions.\n                closeSubPartial();\n                prev.exp.forEach((expression, i) => expression._up(chunk.exp[i].e));\n                // We always want to reference the root expressions as long as the\n                // chunks remain equivalent, so here we explicitly point the new chunk's\n                // expression set to the original chunk expression set — which was just\n                // updated with the new expression's \"values\".\n                chunk.exp = prev.exp;\n                chunk.dom = prev.dom;\n                lastNode = chunk.dom[chunk.dom.length - 1];\n                if (isTextNodeChunk(chunk) && lastNode instanceof Text) {\n                    lastNode.nodeValue = chunk.tpl;\n                }\n            }\n            else {\n                if (prev && chunk.html !== prev.html && !prev.key) {\n                    // The previous chunk in this position has changed its underlying html\n                    // this happens when someone is using non-reactive values in the\n                    // template. We need to remove the previous nodes.\n                    toRemove.push(...prev.dom);\n                }\n                // Ok, now we're building some new DOM up y'all, let the chunking begin!\n                if (!subPartial.l)\n                    startChunking = index;\n                subPartial.add(chunk.tpl);\n            }\n        });\n        closeSubPartial();\n        let node = lastNode === null || lastNode === void 0 ? void 0 : lastNode.nextSibling;\n        while (node && group in node) {\n            toRemove.push(node);\n            const next = node.nextSibling;\n            node = next;\n        }\n        removeNodes(toRemove);\n        reset();\n    };\n    // What follows are internal \"methods\" for each partial.\n    const reset = () => {\n        toRemove.length = 0;\n        html = '';\n        partial.l = 0;\n        expressions = { i: 0, e: [] };\n        previousChunks = [...chunks];\n        chunks = [];\n    };\n    const addPlaceholderChunk = (node) => {\n        html = '<!---->';\n        chunks.push({\n            html,\n            exp: [],\n            dom: node ? [node] : [],\n            tpl: t `${html}`,\n            key: 0,\n        });\n    };\n    /**\n     * Walks through the document fragment and assigns the nodes to the correct\n     * DOM chunk. Chunks of DOM are divided by the bookend comment.\n     * @param frag - A document fragment that has been created from a partial\n     * @returns\n     */\n    const assignDomChunks = (frag) => {\n        let chunkIndex = 0;\n        const toRemove = [];\n        frag.childNodes.forEach((node) => {\n            if (node.nodeType === 8 && node.data === bookend) {\n                chunkIndex++;\n                // Remove the comment\n                toRemove.push(node);\n                return;\n            }\n            Object.defineProperty(node, group, { value: group });\n            chunks[chunkIndex].dom.push(node);\n        });\n        toRemove.forEach((node) => node.remove());\n        return frag;\n    };\n    const transferChunks = (partialA, chunksB, chunkIndex) => {\n        partialA.ch().forEach((chunk, index) => {\n            chunksB[chunkIndex + index].dom = chunk.dom;\n        });\n    };\n    return partial;\n}\n/**\n * Checks if a given chunk is a textNode chunk.\n * @param chunk - A partial chunk\n * @returns\n */\nfunction isTextNodeChunk(chunk) {\n    return chunk.dom.length === 1 && !isTpl(chunk.tpl);\n}\n","import { t } from './html';\nimport { r, w } from './reactive';\n/**\n * html is an alias for t\n */\nexport const html = t;\n/**\n * reactive is an alias for r\n */\nexport const reactive = r;\n/**\n * watch is an alias for w\n */\nexport const watch = w;\nexport { t, r, w };\nexport { nextTick } from './common';\n// TODO: REMOVE THIS\nexport { measurements } from './common';\n"],"mappings":"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"}